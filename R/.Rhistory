knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list=ls())
#install packages
#only run once
#run every session
library(tidyverse)
library(dplyr)
library(ggplot2)
per_dat <- read_csv("https://raw.githubusercontent.com/c-townsley/pbn_a3_repo/main/Data/HH%20Travel%20Survey/per_pub.csv")
trip_dat <- read_csv("https://raw.githubusercontent.com/c-townsley/pbn_a3_repo/main/Data/HH%20Travel%20Survey/trip_pub.csv")
hh_dat <- read_csv("https://raw.githubusercontent.com/c-townsley/pbn_a3_repo/main/Data/HH%20Travel%20Survey/hh_pub_CSV.csv", col_names = TRUE)
head(per_dat)
head(trip_dat)
head(hh_dat)
#install packages
#only run once
#run every session
library(tidyverse)
library(dplyr)
library(ggplot2)
per_dat <- read_csv("https://raw.githubusercontent.com/c-townsley/pbn_a3_repo/main/Data/HH%20Travel%20Survey/per_pub.csv")
trip_dat <- read_csv("https://raw.githubusercontent.com/c-townsley/pbn_a3_repo/main/Data/HH%20Travel%20Survey/trip_pub.csv")
hh_dat <- read_csv("https://raw.githubusercontent.com/c-townsley/pbn_a3_repo/main/Data/HH%20Travel%20Survey/hh_pub_CSV.csv", col_names = TRUE)
head(per_dat)
head(trip_dat)
head(hh_dat)
# Develop a dataset with all relevant variables
#every respondents first work trip mode, travel time,
#the respondent's income, age, gender
#attributes of the mode and attribute of the decision maker
# Want to look at the person_dat, but also want to include income, which is in the HH table.
# matching the datasets on HH ID number, which is the variable "SAMPN"
per_hh_dat <- merge(per_dat, hh_dat,
by.x = "SAMPN", #per_dat is the x
by.y = "SAMPN", #hh_dat is the y
all.x = TRUE,   #taking every row of X and finding the matching Y
all.y = FALSE,  #Exclude rows in hh_dat that don't have a matching value in per_dat
sort = FALSE)
dim(per_hh_dat)
head(per_hh_dat)
# Develop a dataset with all relevant variables
#every respondents first work trip mode, travel time,
#the respondent's income, age, gender
#attributes of the mode and attribute of the decision maker
# Want to look at the person_dat, but also want to include income, which is in the HH table.
# matching the datasets on HH ID number, which is the variable "SAMPN"
per_hh_dat <- merge(per_dat, hh_dat,
by.x = "SAMPN", #per_dat is the x
by.y = "SAMPN", #hh_dat is the y
all.x = TRUE,   #taking every row of X and finding the matching Y
all.y = FALSE,  #Exclude rows in hh_dat that don't have a matching value in per_dat
sort = FALSE)
head(per_hh_dat)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list=ls())
# Develop a dataset with all relevant variables
#every respondents first work trip mode, travel time,
#the respondent's income, age, gender
#attributes of the mode and attribute of the decision maker
# Want to look at the person_dat, but also want to include income, which is in the HH table.
# matching the datasets on HH ID number, which is the variable "SAMPN"
per_hh_dat <- merge(per_dat, hh_dat,
by.x = "SAMPN", #per_dat is the x
by.y = "SAMPN", #hh_dat is the y
all.x = TRUE,   #taking every row of X and finding the matching Y
all.y = FALSE,  #Exclude rows in hh_dat that don't have a matching value in per_dat
sort = FALSE)
#install packages
#only run once
#run every session
library(tidyverse)
library(dplyr)
library(ggplot2)
per_dat <- read_csv("https://raw.githubusercontent.com/c-townsley/pbn_a3_repo/main/Data/HH%20Travel%20Survey/per_pub.csv")
trip_dat <- read_csv("https://raw.githubusercontent.com/c-townsley/pbn_a3_repo/main/Data/HH%20Travel%20Survey/trip_pub.csv")
hh_dat <- read_csv("https://raw.githubusercontent.com/c-townsley/pbn_a3_repo/main/Data/HH%20Travel%20Survey/hh_pub_CSV.csv", col_names = TRUE)
head(per_dat)
head(trip_dat)
head(hh_dat)
# Develop a dataset with all relevant variables
#every respondents first work trip mode, travel time,
#the respondent's income, age, gender
#attributes of the mode and attribute of the decision maker
# Want to look at the person_dat, but also want to include income, which is in the HH table.
# matching the datasets on HH ID number, which is the variable "SAMPN"
per_hh_dat <- merge(per_dat, hh_dat,
by.x = "SAMPN", #per_dat is the x
by.y = "SAMPN", #hh_dat is the y
all.x = TRUE,   #taking every row of X and finding the matching Y
all.y = FALSE,  #Exclude rows in hh_dat that don't have a matching value in per_dat
sort = FALSE)
head(per_hh_dat)
per_datClean <- per_hh_dat %>%
dplyr::select(-"VETMO", -"W2TY", -"W2TYO",  -"W2TYP", -"W2LOC", -"W2IND", -"W2INO", -"W2OCC", -"W2OCO", -"W2DAY", -"W2HOM", -"W2HOO", -"W2ST", -"W2ET",  -"W1WKD3", -"W1WKD4", -"W1WKE", -"W1WKD1", -"W1WKD2")
per_datClean <- per_hh_dat %>%
dplyr::select(-"VETMO", -"W2TY", -"W2TYO",  -"W2TYP", -"W2LOC", -"W2IND", -"W2INO", -"W2OCC", -"W2OCO", -"W2DAY", -"W2HOM", -"W2HOO", -"W2ST", -"W2ET",  -"W1WKD3", -"W1WKD4", -"W1WKE", -"W1WKD1", -"W1WKD2")
head(per_datClean)
##now we have to deal with all the transit mode info
head(trip_dat,10)
hist(trip_dat$TRAN1)
hist(trip_dat$TRAN2)
hist(trip_dat$TRAN3)
trip_dat$drivealone[(trip_dat$TRAN1==21)]<-1
head(trip_dat,20)
trip_dat$drivealone[which(is.na(trip_dat$drivealone))]<-0
trip_dat$drivealone[(trip_dat$TRAN1==21)]<-1
trip_dat$drivealone[which(is.na(trip_dat$drivealone))]<-0
head(trip_dat,20)
trip_dat$drivealone[(trip_dat$TRAN1==21 | trip_dat$TRAN2==21 |
trip_dat$TRAN3==21| trip_dat$TRAN4==21)]<-1
trip_dat$drivealone[which(is.na(trip_dat$drivealone))]<-0
head(trip_dat,20)
CommuteTripsClean <- trip_dat[which(trip_dat$Dest_PTYE == 2), ]
head(CommuteTripsClean)
head(per_hh_dat)
trip_dat$drivealone[(trip_dat$TRAN1==21 | trip_dat$TRAN2==21 |
trip_dat$TRAN3==21| trip_dat$TRAN4==21)]<-1
trip_dat$drivealone[which(is.na(trip_dat$drivealone))]<-0
head(trip_dat,20)
View(trip_dat)
#now let's pick out that first work trip
CommuteTripsClean <- trip_dat[which(trip_dat$Dest_PTYE == 2), ]
head(CommuteTripsClean)
head(per_hh_dat)
#We can replicate this column by concatenating SAMPB and PERNO
CommuteTripsClean$SAMPN_PER1 <- paste0(CommuteTripsClean$SAMPN, CommuteTripsClean$PERNO)
head(CommuteTripsClean)
##but still, some people take multiple work trips. Let's just grab the first work trip
CommuteTripsClean <- subset(CommuteTripsClean, !duplicated(SAMPN_PER))
##but still, some people take multiple work trips. Let's just grab the first work trip
CommuteTripsClean <- subset(CommuteTripsClean, !duplicated(SAMPN_PER1))
head(CommuteTripsClean, 20)
