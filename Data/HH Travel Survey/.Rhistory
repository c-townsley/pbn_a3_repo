rm(list=ls())
library(tidyverse)
per_dat <- read.csv("per_pub.csv") # read csv
setwd("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Exercises-Lectures/Unit1_Correlation/Data")
setwd("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Exercises-Lectures/Unit1_Correlation/Data/HH Travel Survey")
per_dat <- read.csv("per_pub.csv") # read csv
dim(per_dat) # 10391 rows
head(per_dat)
hh_dat <- read.csv("hh_pub_CSV.csv", header = TRUE)
dim(hh_dat) # 4217 rows
head(hh_dat)
trip_dat <- read.csv("trip_pub.csv") # read csv
dim(trip_dat) # 47071 rows
head(trip_dat, 20)
veh_dat <- read.csv("veh_pub.csv", header = TRUE)
dim(veh_dat)
head(veh_dat)
loc_dat <- read.csv("loc_pub.csv", header = TRUE)
dim(loc_dat)
head(loc_dat)
per_hh_dat <- merge(per_dat, hh_dat,
by.x = "SAMPN",
by.y = "SAMPN",
all.x = TRUE,
all.y = FALSE,
sort = FALSE)
head(per_hh_dat)
colnamCleaning<-c("VETMO", "W2TY", "W2TYO",  "W2TYP", "W2LOC", "W2IND", "W2INO", "W2OCC", "W2OCO", "W2DAY", "W2HOM", "W2HOO", "W2ST", "W2ET",  "W1WKD3", "W1WKD4", "W1WKE", "W1WKD1", "W1WKD2")
per_datClean<-per_hh_dat[ , -which(names(per_dat) %in% colnamCleaning)]
trip_dat$drivealone[(trip_dat$TRAN1==21 | trip_dat$TRAN2==21 |
trip_dat$TRAN3==21| trip_dat$TRAN4==21)]<-1
trip_dat$drivealone[which(is.na(trip_dat$drivealone))]<-0
CommuteTripsClean <- trip_dat[which(trip_dat$Dest_PTYE == 2), ]
head(CommuteTripsClean)
head(per_hh_dat)
#let's merge in on person number and SAMPN
## we have to merge together the SAMPN and the person number
#There is an X variable in the data frame already.
#We can replicate this column by concatenating SAMPB and PERNO
CommuteTripsClean$SAMPN_PER <- do.call(paste, c(CommuteTripsClean[c("SAMPN", "PERNO")], sep = ""))
#A simpler way would be
CommuteTripsClean$SAMPN_PER1 <- paste0(CommuteTripsClean$SAMPN, CommuteTripsClean$PERNO)
##but still, some people take multiple work trips. Let's just grab the first work trip
CommuteTripsClean <- subset(CommuteTripsClean, !duplicated(SAMPN_PER))
varsInterest <- c("SAMPN", "PERNO", "SAMPN_PER", "TOLLA", "TOLL", "PARKC", "PARKU", "PRKUO", "TRPDUR", "drivealone")
CommuteTripsClean2<-CommuteTripsClean[ , which(names(CommuteTripsClean) %in% varsInterest)]
head(CommuteTripsClean2)
per_hh_dat$SAMPN_PER <- paste0(per_hh_dat$SAMPN, per_hh_dat$PERNO)
CommuteTripsPerson <- merge(CommuteTripsClean2,
per_hh_dat,
by.x = "SAMPN_PER",
by.y = "SAMPN_PER",
all.x = TRUE,
all.y = FALSE,
sort = FALSE)
##################################################################
##generalized linear model let's you specify the "link" function
#finally, the  binomial logit
mod <- glm ( drivealone ~ AGE+TRPDUR+INCOME, data=CommuteTripsPerson, family = binomial)
cor.test(CommuteTripsPerson$drivealone, CommuteTripsPerson$INCOME)
plot(CommuteTripsPerson$AGE, CommuteTripsPerson$drivealone)
plot(CommuteTripsPerson$TRPDUR, CommuteTripsPerson$drivealone)
CommuteTripsPerson_clean <-CommuteTripsPerson[which(CommuteTripsPerson$AGE %in% 1:110),]
CommuteTripsPerson_clean <-CommuteTripsPerson_clean[which(CommuteTripsPerson_clean$TRPDUR %in% 0:400),]
CommuteTripsPerson_clean <-CommuteTripsPerson_clean[which(CommuteTripsPerson_clean$INCOME %in% 0:200000),]
#These plots do not show much because many of the dots overlap.
plot(CommuteTripsPerson_clean$AGE, CommuteTripsPerson_clean$drivealone)
plot(CommuteTripsPerson_clean$TRPDUR, CommuteTripsPerson_clean$drivealone)
plot(jitter(CommuteTripsPerson_clean$drivealone, factor=0.5) ~ CommuteTripsPerson_clean$AGE,
pch= 4,
ylab="Drive Alone",
xlab="Age")
mod <- glm ( drivealone ~ AGE+TRPDUR+INCOME, data=CommuteTripsPerson_clean, family = binomial)
summary(mod)
plot(CommuteTripsPerson_clean$TRPDUR, CommuteTripsPerson_clean$drivealone)
plot(jitter(CommuteTripsPerson_clean$drivealone, factor=.5) ~ CommuteTripsPerson_clean$TRPDUR,
pch= 4,
ylab="Drive Alone",
xlab="Trip Duration")
fitted (mod)
rm(list=ls())
library(tidyverse)
er_dat <- read.csv("per_pub.csv") # read csv
dim(per_dat) # 10391 rows
per_dat <- read.csv("per_pub.csv") # read csv
rm(er_dat)
hh_dat <- read.csv("hh_pub_CSV.csv", header = TRUE)
dim(hh_dat) # 4217 rows
head(hh_dat)
trip_dat <- read.csv("trip_pub.csv") # read csv
dim(trip_dat) # 47071 rows
head(trip_dat, 20)
veh_dat <- read.csv("veh_pub.csv", header = TRUE)
dim(veh_dat)
head(veh_dat)
loc_dat <- read.csv("loc_pub.csv", header = TRUE)
dim(loc_dat)
head(loc_dat)
colnames(hh_dat)   # see column names
colnames(per_dat)   # see column names
colnames(veh_dat)   # see column names
colnames(trip_dat)   # see column names
colnames(loc_dat)   # see column names
###
##example 1.
##build a binomial logit that identifies the determinants of driving
#as the drive vs. not driving for their first commute to work trip
##Let's develop a dataset that includes the following
per_hh_dat <- merge(per_dat, hh_dat,
by.x = "SAMPN",
by.y = "SAMPN",
all.x = TRUE,
all.y = FALSE,
sort = FALSE)
colnamCleaning<-c("VETMO", "W2TY", "W2TYO",  "W2TYP", "W2LOC", "W2IND", "W2INO", "W2OCC", "W2OCO", "W2DAY", "W2HOM", "W2HOO", "W2ST", "W2ET",  "W1WKD3", "W1WKD4", "W1WKE", "W1WKD1", "W1WKD2")
per_datClean<-per_hh_dat[ , -which(names(per_dat) %in% colnamCleaning)]
##or, do per_datClean<-per_datClean[ , -c(16:30)]
head(per_datClean)
trip_dat$drivealone[(trip_dat$TRAN1==21 | trip_dat$TRAN2==21 |
trip_dat$TRAN3==21| trip_dat$TRAN4==21)]<-1
head(trip_dat,20)
trip_dat$drivealone[which(is.na(trip_dat$drivealone))]<-0
head(trip_dat,20)
#there are people with NAs for their work trip mode....
#now let's pick out that first work trip
CommuteTripsClean <- trip_dat[which(trip_dat$Dest_PTYE == 2), ]
head(CommuteTripsClean)
head(per_hh_dat)
CommuteTripsClean$SAMPN_PER <- do.call(paste, c(CommuteTripsClean[c("SAMPN", "PERNO")], sep = ""))
#A simpler way would be
CommuteTripsClean$SAMPN_PER1 <- paste0(CommuteTripsClean$SAMPN, CommuteTripsClean$PERNO)
head(CommuteTripsClean)
##but still, some people take multiple work trips. Let's just grab the first work trip
CommuteTripsClean <- subset(CommuteTripsClean, !duplicated(SAMPN_PER))
head(CommuteTripsClean, 20)
varsInterest <- c("SAMPN", "PERNO", "SAMPN_PER", "TOLLA", "TOLL", "PARKC", "PARKU", "PRKUO", "TRPDUR", "drivealone")
CommuteTripsClean2<-CommuteTripsClean[ , which(names(CommuteTripsClean) %in% varsInterest)]
head(CommuteTripsClean2)
head(per_hh_dat)
per_hh_dat$SAMPN_PER <- paste0(per_hh_dat$SAMPN, per_hh_dat$PERNO)
CommuteTripsPerson <- merge(CommuteTripsClean2,
per_hh_dat,
by.x = "SAMPN_PER",
by.y = "SAMPN_PER",
all.x = TRUE,
all.y = FALSE,
sort = FALSE)
mod <- glm ( drivealone ~ AGE+TRPDUR+INCOME, data=CommuteTripsPerson, family = binomial)
summary(mod)
cor.test(CommuteTripsPerson$drivealone, CommuteTripsPerson$INCOME)
plot(CommuteTripsPerson$AGE, CommuteTripsPerson$drivealone)
plot(CommuteTripsPerson$TRPDUR, CommuteTripsPerson$drivealone)
#take out some outliers
CommuteTripsPerson_clean <-CommuteTripsPerson[which(CommuteTripsPerson$AGE %in% 1:110),]
CommuteTripsPerson_clean <-CommuteTripsPerson_clean[which(CommuteTripsPerson_clean$TRPDUR %in% 0:400),]
CommuteTripsPerson_clean <-CommuteTripsPerson_clean[which(CommuteTripsPerson_clean$INCOME %in% 0:200000),]
#These plots do not show much because many of the dots overlap.
plot(CommuteTripsPerson_clean$AGE, CommuteTripsPerson_clean$drivealone)
plot(CommuteTripsPerson_clean$TRPDUR, CommuteTripsPerson_clean$drivealone)
#Jitter it!
plot(jitter(CommuteTripsPerson_clean$drivealone, factor=0.5) ~ CommuteTripsPerson_clean$AGE,
pch= 4,
ylab="Drive Alone",
xlab="Age")
mod <- glm ( drivealone ~ AGE+TRPDUR+INCOME, data=CommuteTripsPerson_clean, family = binomial)
summary(mod)
plot(CommuteTripsPerson_clean$TRPDUR, CommuteTripsPerson_clean$drivealone)
plot(jitter(CommuteTripsPerson_clean$drivealone, factor=.5) ~ CommuteTripsPerson_clean$TRPDUR,
pch= 4,
ylab="Drive Alone",
xlab="Trip Duration")
fitted (mod)
# now, if you plot just the model fit using the existing data, you get:
points ( CommuteTripsPerson_clean$TRPDUR, fitted (mod), col="red")
# let's see how the prob. change with just TRPDUR
mod <- glm ( drivealone ~ AGE+TRPDUR+INCOME, data=CommuteTripsPerson_clean, family = binomial)
summary(mod)
newdat <- data.frame (CommuteTripsPerson_clean$TRPDUR, rep(50000, n),
rep(mean(CommuteTripsPerson_clean$AGE), n))
newdat1 <- data.frame (CommuteTripsPerson_clean$TRPDUR, rep(50000, n), rep(23, n))
head(CommuteTripsPerson_clean$TRPDUR)
head(newdat)
newdat <- data.frame (CommuteTripsPerson_clean$TRPDUR, rep(50000, n),
rep(mean(CommuteTripsPerson_clean$AGE), n))
newdat <- data.frame (CommuteTripsPerson_clean$TRPDUR, rep(50000, n),
rep(mean(CommuteTripsPerson_clean$AGE), n))
?predict
####What about doing this in ggplot?
library(tidyverse)
n <- dim(CommuteTripsPerson_clean)[1]
newdat <- data.frame (CommuteTripsPerson_clean$TRPDUR, rep(50000, n),
rep(mean(CommuteTripsPerson_clean$AGE), n))
newdat1 <- data.frame (CommuteTripsPerson_clean$TRPDUR, rep(50000, n), rep(23, n))
head(CommuteTripsPerson_clean$TRPDUR)
head(newdat)
colnames(newdat) <- c("TRPDUR", "INCOME", "AGE")
colnames(newdat1) <- c("TRPDUR", "INCOME", "AGE")
lines (CommuteTripsPerson_clean$TRPDUR, predict.glm (mod, newdata = newdat, type="response"), col="blue")
lines (CommuteTripsPerson_clean$TRPDUR, predict.glm (mod, newdata = newdat1, type="response"), col="green")
legend('topright',   c('Age 43, Income 50K', 'Age 23, Income 50K'),
col=c("blue", "green"), pch=21:21,lty=1:1)
newdat_gg<-data.frame(matrix(ncol = 3, nrow = nrow(CommuteTripsPerson_clean)))
colnames(newdat_gg)<- c("TRPDUR", "INCOME", "AGE")
newdat_gg$TRPDUR <- CommuteTripsPerson_clean$TRPDUR
newdat_gg$INCOME <- 50000
newdat_gg$AGE <- mean(CommuteTripsPerson_clean$AGE)
newdat_gg_1<-data.frame(matrix(ncol = 3, nrow = nrow(CommuteTripsPerson_clean)))
colnames(newdat_gg_1)<- c("TRPDUR", "INCOME", "AGE")
newdat_gg_1$TRPDUR <- CommuteTripsPerson_clean$TRPDUR
newdat_gg_1$INCOME <- 50000
newdat_gg_1$AGE <- 23
newdat_gg_2<-data.frame(matrix(ncol = 3, nrow = nrow(CommuteTripsPerson_clean)))
colnames(newdat_gg_2)<- c("TRPDUR", "INCOME", "AGE")
newdat_gg_2$TRPDUR <- CommuteTripsPerson_clean$TRPDUR
newdat_gg_2$INCOME <- 50000
newdat_gg_2$AGE <- 60
pred_dat<- data.frame(matrix(ncol = 4, nrow = nrow(CommuteTripsPerson_clean)))
colnames(pred_dat)<- c("TRPDUR", "Pred_Age43_Inc50K", "Pred_Age23_Inc50K", "Pred_Age60_Inc50K")
pred_dat$TRPDUR<-CommuteTripsPerson_clean$TRPDUR
pred_dat$Pred_Age43_Inc50K<- predict(mod, newdat_gg, type="response") #store predicted probabilities in new column
pred_dat$Pred_Age23_Inc50K<- predict(mod, newdat_gg_1, type="response")
pred_dat$Pred_Age60_Inc50K<- predict(mod, newdat_gg_2, type="response")
dat <- gather(pred_dat, -TRPDUR, key = "Scenario", value = "value") #gather is old syntax for going from long to wide or vice versa
View(dat)
ggplot(dat, aes(x = TRPDUR, y = value, colour = Scenario)) +
geom_line() + ylim(0,1) +
xlab("Trip Duration") + ylab("Predicted Probability of Drive Alone")
pred <- as.data.frame(fitted(mod))
pred <- rename(pred, "prob" = "fitted(mod)")
pred <- mutate(pred, "binary" = ifelse(prob < 0.5, 0, 1))
CommuteTripsPerson_clean$binary <- pred$binary
head(CommuteTripsPerson_clean)
View(CommuteTripsPerson_clean)
summarize(CommuteTripsPerson_clean)
View(CommuteTripsPerson_clean)
(sum(CommuteTripsPerson_clean$drivealone == 1 & CommuteTripsPerson_clean$pred == 1) +
sum(CommuteTripsPerson_clean$drivealone == 0 & CommuteTripsPerson_clean$pred == 0))
/ nrow(CommuteTripsPerson_clean)
(sum(CommuteTripsPerson_clean$drivealone == 1 & CommuteTripsPerson_clean$pred == 1) +
sum(CommuteTripsPerson_clean$drivealone == 0 & CommuteTripsPerson_clean$pred == 0)) /
nrow(CommuteTripsPerson_clean)
(sum(CommuteTripsPerson_clean$drivealone == 1 & CommuteTripsPerson_clean$pred == 1) +
sum(CommuteTripsPerson_clean$drivealone == 0 & CommuteTripsPerson_clean$pred == 0))
(sum(CommuteTripsPerson_clean$drivealone == 1 & CommuteTripsPerson_clean$pred == 1) +
sum(CommuteTripsPerson_clean$drivealone == 0 & CommuteTripsPerson_clean$pred == 0))
#calc the predicted probabilities based on the model
pred <- as.data.frame(fitted(mod))
pred <- rename(pred, "prob" = "fitted(mod)")
pred <- mutate(pred, "binary" = ifelse(prob < 0.5, 0, 1)) #if predicted probabilities are <0.5, then classify as zero, otherwise classify as 1
#append column to original data frame
CommuteTripsPerson_clean$binary <- pred$binary
head(CommuteTripsPerson_clean)
(sum(CommuteTripsPerson_clean$drivealone == 1 & CommuteTripsPerson_clean$pred == 1) +
sum(CommuteTripsPerson_clean$drivealone == 0 & CommuteTripsPerson_clean$pred == 0))
(sum(CommuteTripsPerson_clean$drivealone == 1 & CommuteTripsPerson_clean$pred == 1) +
sum(CommuteTripsPerson_clean$drivealone == 0 & CommuteTripsPerson_clean$pred == 0)) /
nrow(CommuteTripsPerson_clean)
qchisq(.95, df=3024)
#but, do we do better when we add in variables (we hope so)
summary(mod)
#Null deviance shows how well the response is predicted by a model
#with nothing but an intercept (grand mean).
summary(mod)
#chi square statistic
#Difference between deviances
modelChi <- mod$null.deviance - mod$deviance
modelChi
chidf <- mod$df.null - mod$df.residual
chidf
chisq.prob <- 1 - pchisq(modelChi, chidf) #gives the p-value of the chi-squared test
chisq.prob
summary(mod1)
rm(list=ls())
library(tidyverse)
##################################
# READ DATA AND CLEAN UP
##################################
per_dat <- read.csv("per_pub.csv") # read csv
dim(per_dat) # 10391 rows
head(per_dat)
hh_dat <- read.csv("hh_pub_CSV.csv", header = TRUE)
dim(hh_dat) # 4217 rows
head(hh_dat)
trip_dat <- read.csv("trip_pub.csv") # read csv
dim(trip_dat) # 47071 rows
head(trip_dat, 20)
veh_dat <- read.csv("veh_pub.csv", header = TRUE)
dim(veh_dat)
head(veh_dat)
loc_dat <- read.csv("loc_pub.csv", header = TRUE)
dim(loc_dat)
head(loc_dat)
colnames(hh_dat)   # see column names
colnames(per_dat)   # see column names
colnames(veh_dat)   # see column names
colnames(trip_dat)   # see column names
colnames(loc_dat)   # see column names
###
##example 1.
##build a binomial logit that identifies the determinants of driving
#as the drive vs. not driving for their first commute to work trip
##Let's develop a dataset that includes the following
#every respondents first work trip mode, travel time,
#the respondent's income, age, gender
#attributes of the mode and attribute of the decision maker
#I want to look at the person_dat, but also want to include income, which is in the HH table.
per_hh_dat <- merge(per_dat, hh_dat,
by.x = "SAMPN",
by.y = "SAMPN",
all.x = TRUE,
all.y = FALSE,
sort = FALSE)
dim(per_hh_dat)
head(per_hh_dat)
#per_dat is my x
#hh_dat is my y
#I'm matching the datasets on the variable "SAMPN"
#I'm taking every row of X and finding the matching Y
#If there is a row in "hh_dat" that doesn't have a matching value in per_dat,
#then it is not included
#SELECT CERTAIN COLUMNS
#drop some columns so the data is cleaner
head(per_hh_dat)
colnamCleaning<-c("VETMO", "W2TY", "W2TYO",  "W2TYP", "W2LOC", "W2IND", "W2INO", "W2OCC", "W2OCO", "W2DAY", "W2HOM", "W2HOO", "W2ST", "W2ET",  "W1WKD3", "W1WKD4", "W1WKE", "W1WKD1", "W1WKD2")
per_datClean<-per_hh_dat[ , -which(names(per_dat) %in% colnamCleaning)]
##or, do per_datClean<-per_datClean[ , -c(16:30)]
head(per_datClean)
##now we have to deal with all the transit mode info
head(trip_dat,10)
hist(trip_dat$TRAN1)
hist(trip_dat$TRAN2)
hist(trip_dat$TRAN3)
#let's grab anyone who has a drive alone trip in their trip sequence
trip_dat$drivealone[(trip_dat$TRAN1==21 | trip_dat$TRAN2==21 |
trip_dat$TRAN3==21| trip_dat$TRAN4==21)]<-1
head(trip_dat,20)
trip_dat$drivealone[which(is.na(trip_dat$drivealone))]<-0
head(trip_dat,20)
#there are people with NAs for their work trip mode....
#now let's pick out that first work trip
CommuteTripsClean <- trip_dat[which(trip_dat$Dest_PTYE == 2), ]
head(CommuteTripsClean)
head(per_hh_dat)
#let's merge in on person number and SAMPN
## we have to merge together the SAMPN and the person number
#There is an X variable in the data frame already.
#We can replicate this column by concatenating SAMPB and PERNO
CommuteTripsClean$SAMPN_PER <- do.call(paste, c(CommuteTripsClean[c("SAMPN", "PERNO")], sep = ""))
#A simpler way would be
CommuteTripsClean$SAMPN_PER1 <- paste0(CommuteTripsClean$SAMPN, CommuteTripsClean$PERNO)
head(CommuteTripsClean)
#?paste
#?do.call
##but still, some people take multiple work trips. Let's just grab the first work trip
CommuteTripsClean <- subset(CommuteTripsClean, !duplicated(SAMPN_PER))
head(CommuteTripsClean, 20)
?subset
#OK great. Now let's retain just the columns we need from the trip data.
varsInterest <- c("SAMPN", "PERNO", "SAMPN_PER", "TOLLA", "TOLL", "PARKC", "PARKU", "PRKUO", "TRPDUR", "drivealone")
CommuteTripsClean2<-CommuteTripsClean[ , which(names(CommuteTripsClean) %in% varsInterest)]
head(CommuteTripsClean2)
#let's merge in on person number and SAMPN
## we have to merge together the SAMPN and the person number
head(per_hh_dat)
per_hh_dat$SAMPN_PER <- paste0(per_hh_dat$SAMPN, per_hh_dat$PERNO)
CommuteTripsPerson <- merge(CommuteTripsClean2,
per_hh_dat,
by.x = "SAMPN_PER",
by.y = "SAMPN_PER",
all.x = TRUE,
all.y = FALSE,
sort = FALSE)
head(CommuteTripsPerson)
head(CommuteTripsPerson$drivealone)
##################################################################
##generalized linear model let's you specify the "link" function
#finally, the  binomial logit
mod <- glm ( drivealone ~ AGE+TRPDUR+INCOME, data=CommuteTripsPerson, family = binomial)
summary(mod)
cor.test(CommuteTripsPerson$drivealone, CommuteTripsPerson$INCOME)
plot(CommuteTripsPerson$AGE, CommuteTripsPerson$drivealone)
plot(CommuteTripsPerson$TRPDUR, CommuteTripsPerson$drivealone)
#take out some outliers
CommuteTripsPerson_clean <-CommuteTripsPerson[which(CommuteTripsPerson$AGE %in% 1:110),]
CommuteTripsPerson_clean <-CommuteTripsPerson_clean[which(CommuteTripsPerson_clean$TRPDUR %in% 0:400),]
CommuteTripsPerson_clean <-CommuteTripsPerson_clean[which(CommuteTripsPerson_clean$INCOME %in% 0:200000),]
#These plots do not show much because many of the dots overlap.
plot(CommuteTripsPerson_clean$AGE, CommuteTripsPerson_clean$drivealone)
plot(CommuteTripsPerson_clean$TRPDUR, CommuteTripsPerson_clean$drivealone)
#Jitter it!
plot(jitter(CommuteTripsPerson_clean$drivealone, factor=0.5) ~ CommuteTripsPerson_clean$AGE,
pch= 4,
ylab="Drive Alone",
xlab="Age")
plot(CommuteTripsPerson_clean$TRPDUR, CommuteTripsPerson_clean$drivealone)
plot(jitter(CommuteTripsPerson_clean$drivealone, factor=.5) ~ CommuteTripsPerson_clean$TRPDUR,
pch= 4,
ylab="Drive Alone",
xlab="Trip Duration")
fitted (mod) #
# now, if you plot just the model fit using the existing data, you get:
points (CommuteTripsPerson_clean$TRPDUR, fitted (mod), col="red")
mod1 <- glm ( drivealone ~ INCOME, data=CommuteTripsPerson_clean, family = binomial())
summary(mod1)
mod2 <- glm ( drivealone ~ INCOME + AGE, data=CommuteTripsPerson_clean, family = binomial())
summary(mod2)
modelChi1 <- mod1$deviance - mod2$deviance
chidf1 <- mod1$df.residual - mod2$df.residual
chisq.prob1 <- 1 - pchisq(modelChi1, chidf1)
chisq.prob1
summary(mod2)
modelChi1 <- mod1$deviance - mod2$deviance
chidf1 <- mod1$df.residual - mod2$df.residual
chisq.prob1 <- 1 - pchisq(modelChi1, chidf1)
chisq.prob1
#another way to check model fit
#null hypothesis is that the addition of a new variable does not improve the quality of the model
anova(mod, test="Chisq")
########Stepwise Regression for Generalized Linear Models
drop1(mod, test="Chisq")
#see add1 to learn about how to test the addition of new variables
?add1
summary(mod)
exp(coef(mod))
#recall:
##if exp(coef) = .8:  a unit increase in X is associated with
#################a 20% decline in the odds ratio
##if exp(coef)  = 1.5:  a unit increase in X is associated with
#################a 50% increase in the odds ratio
#percent change in the odds ratio
100 * (exp(coef(mod))-1)
#To create a 95% confidence interval for the estimate, type:
exp(confint.default(mod))
